Archive member included because of file (symbol)

/usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_exit.o)
                              /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr5/crtm32.o (exit)
/usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_clear_bss.o)
                              ./ausgabe.o (__do_clear_bss)
/usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr5/libc.a(itoa.o)
                              ./tasten.o (itoa)
/usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr5/libc.a(strrev.o)
                              /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr5/libc.a(itoa.o) (strrev)
/usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_udivmodhi4.o)
                              /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr5/libc.a(itoa.o) (__udivmodhi4)

↵
Speichereinrichtung
↵

Name             Ursprung           Länge             Eigenschaften
text             0x0000000000000000 0x0000000000020000 xr
data             0x0000000000800060 0x000000000000ffa0 rw !x
eeprom           0x0000000000810000 0x0000000000010000 rw !x
fuse             0x0000000000820000 0x0000000000000400 rw !x
lock             0x0000000000830000 0x0000000000000400 rw !x
signature        0x0000000000840000 0x0000000000000400 rw !x
user_signatures  0x0000000000850000 0x0000000000000400 rw !x
*default*        0x0000000000000000 0xffffffffffffffff

Linker script and memory map

LOAD /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr5/crtm32.o
LOAD ./ausgabe.o
LOAD ./main.o
LOAD ./pwm.o
LOAD ./serial.o
LOAD ./tasten.o
START GROUP
LOAD /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a
LOAD /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr5/libm.a
LOAD /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr5/libc.a
END GROUP

.hash
 *(.hash)

.dynsym
 *(.dynsym)

.dynstr
 *(.dynstr)

.gnu.version
 *(.gnu.version)

.gnu.version_d
 *(.gnu.version_d)

.gnu.version_r
 *(.gnu.version_r)

.rel.init
 *(.rel.init)

.rela.init
 *(.rela.init)

.rel.text
 *(.rel.text)
 *(.rel.text.*)
 *(.rel.gnu.linkonce.t*)

.rela.text
 *(.rela.text)
 *(.rela.text.*)
 *(.rela.gnu.linkonce.t*)

.rel.fini
 *(.rel.fini)

.rela.fini
 *(.rela.fini)

.rel.rodata
 *(.rel.rodata)
 *(.rel.rodata.*)
 *(.rel.gnu.linkonce.r*)

.rela.rodata
 *(.rela.rodata)
 *(.rela.rodata.*)
 *(.rela.gnu.linkonce.r*)

.rel.data
 *(.rel.data)
 *(.rel.data.*)
 *(.rel.gnu.linkonce.d*)

.rela.data
 *(.rela.data)
 *(.rela.data.*)
 *(.rela.gnu.linkonce.d*)

.rel.ctors
 *(.rel.ctors)

.rela.ctors
 *(.rela.ctors)

.rel.dtors
 *(.rel.dtors)

.rela.dtors
 *(.rela.dtors)

.rel.got
 *(.rel.got)

.rela.got
 *(.rela.got)

.rel.bss
 *(.rel.bss)

.rela.bss
 *(.rela.bss)

.rel.plt
 *(.rel.plt)

.rela.plt
 *(.rela.plt)

.text           0x0000000000000000      0x3a2
 *(.vectors)
 .vectors       0x0000000000000000       0x54 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr5/crtm32.o
                0x0000000000000000                __vectors
                0x0000000000000000                __vector_default
 *(.vectors)
 *(.progmem.gcc*)
 *(.progmem*)
                0x0000000000000054                . = ALIGN (0x2)
                0x0000000000000054                __trampolines_start = .
 *(.trampolines)
 .trampolines   0x0000000000000054        0x0 linker stubs
 *(.trampolines*)
                0x0000000000000054                __trampolines_end = .
 *(.jumptables)
 *(.jumptables*)
 *(.lowtext)
 *(.lowtext*)
                0x0000000000000054                __ctors_start = .
 *(.ctors)
                0x0000000000000054                __ctors_end = .
                0x0000000000000054                __dtors_start = .
 *(.dtors)
                0x0000000000000054                __dtors_end = .
 SORT(*)(.ctors)
 SORT(*)(.dtors)
 *(.init0)
 .init0         0x0000000000000054        0x0 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr5/crtm32.o
                0x0000000000000054                __init
 *(.init0)
 *(.init1)
 *(.init1)
 *(.init2)
 .init2         0x0000000000000054        0xc /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr5/crtm32.o
 *(.init2)
 *(.init3)
 *(.init3)
 *(.init4)
 .init4         0x0000000000000060       0x10 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_clear_bss.o)
                0x0000000000000060                __do_clear_bss
 *(.init4)
 *(.init5)
 *(.init5)
 *(.init6)
 *(.init6)
 *(.init7)
 *(.init7)
 *(.init8)
 *(.init8)
 *(.init9)
 .init9         0x0000000000000070        0x8 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr5/crtm32.o
 *(.init9)
 *(.text)
 .text          0x0000000000000078        0x4 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr5/crtm32.o
                0x0000000000000078                __vector_1
                0x0000000000000078                __vector_12
                0x0000000000000078                __bad_interrupt
                0x0000000000000078                __vector_6
                0x0000000000000078                __vector_3
                0x0000000000000078                __vector_13
                0x0000000000000078                __vector_17
                0x0000000000000078                __vector_19
                0x0000000000000078                __vector_7
                0x0000000000000078                __vector_5
                0x0000000000000078                __vector_4
                0x0000000000000078                __vector_9
                0x0000000000000078                __vector_2
                0x0000000000000078                __vector_15
                0x0000000000000078                __vector_8
                0x0000000000000078                __vector_14
                0x0000000000000078                __vector_10
                0x0000000000000078                __vector_16
                0x0000000000000078                __vector_18
                0x0000000000000078                __vector_20
 .text          0x000000000000007c        0x0 ./ausgabe.o
 .text          0x000000000000007c        0x0 ./main.o
 .text          0x000000000000007c        0x0 ./pwm.o
 .text          0x000000000000007c        0x0 ./serial.o
 .text          0x000000000000007c        0x0 ./tasten.o
 .text          0x000000000000007c        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_exit.o)
 .text          0x000000000000007c        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_clear_bss.o)
 .text          0x000000000000007c        0x0 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr5/libc.a(itoa.o)
 .text          0x000000000000007c        0x0 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr5/libc.a(strrev.o)
 .text          0x000000000000007c        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_udivmodhi4.o)
                0x000000000000007c                . = ALIGN (0x2)
 *(.text.*)
 .text.__vector_11
                0x000000000000007c       0x88 ./ausgabe.o
                0x000000000000007c                __vector_11
 .text.init_aus
                0x0000000000000104        0xe ./ausgabe.o
                0x0000000000000104                init_aus
 .text.aus_refrech
                0x0000000000000112       0x34 ./ausgabe.o
                0x0000000000000112                aus_refrech
 .text.aus_set  0x0000000000000146        0x8 ./ausgabe.o
                0x0000000000000146                aus_set
 .text.init     0x000000000000014e       0x18 ./main.o
                0x000000000000014e                init
 .text.startup.main
                0x0000000000000166        0xe ./main.o
                0x0000000000000166                main
 .text.init_PWM
                0x0000000000000174       0x20 ./pwm.o
                0x0000000000000174                init_PWM
 .text.uart_init
                0x0000000000000194       0x16 ./serial.o
                0x0000000000000194                uart_init
 .text.uart_putc
                0x00000000000001aa        0x8 ./serial.o
                0x00000000000001aa                uart_putc
 .text.uart_putstring
                0x00000000000001b2       0x18 ./serial.o
                0x00000000000001b2                uart_putstring
 .text.tasten_init
                0x00000000000001ca       0x1c ./tasten.o
                0x00000000000001ca                tasten_init
 .text.capStart
                0x00000000000001e6       0x10 ./tasten.o
                0x00000000000001e6                capStart
 .text.capLaden
                0x00000000000001f6       0x18 ./tasten.o
                0x00000000000001f6                capLaden
 .text.capLeeren
                0x000000000000020e        0xc ./tasten.o
                0x000000000000020e                capLeeren
 .text.readCap  0x000000000000021a       0xfa ./tasten.o
                0x000000000000021a                readCap
 .text.libgcc.mul
                0x0000000000000314        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_exit.o)
 .text.libgcc.div
                0x0000000000000314        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_exit.o)
 .text.libgcc   0x0000000000000314        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_exit.o)
 .text.libgcc.prologue
                0x0000000000000314        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_exit.o)
 .text.libgcc.builtins
                0x0000000000000314        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_exit.o)
 .text.libgcc.fmul
                0x0000000000000314        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_exit.o)
 .text.libgcc.fixed
                0x0000000000000314        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_exit.o)
 .text.libgcc.mul
                0x0000000000000314        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_clear_bss.o)
 .text.libgcc.div
                0x0000000000000314        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_clear_bss.o)
 .text.libgcc   0x0000000000000314        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_clear_bss.o)
 .text.libgcc.prologue
                0x0000000000000314        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_clear_bss.o)
 .text.libgcc.builtins
                0x0000000000000314        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_clear_bss.o)
 .text.libgcc.fmul
                0x0000000000000314        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_clear_bss.o)
 .text.libgcc.fixed
                0x0000000000000314        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_clear_bss.o)
 .text.avr-libc
                0x0000000000000314       0x42 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr5/libc.a(itoa.o)
                0x0000000000000314                itoa
 .text.avr-libc
                0x0000000000000356       0x20 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr5/libc.a(strrev.o)
                0x0000000000000356                strrev
 .text.libgcc.mul
                0x0000000000000376        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_udivmodhi4.o)
 .text.libgcc.div
                0x0000000000000376       0x28 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_udivmodhi4.o)
                0x0000000000000376                __udivmodhi4
 .text.libgcc   0x000000000000039e        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_udivmodhi4.o)
 .text.libgcc.prologue
                0x000000000000039e        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_udivmodhi4.o)
 .text.libgcc.builtins
                0x000000000000039e        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_udivmodhi4.o)
 .text.libgcc.fmul
                0x000000000000039e        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_udivmodhi4.o)
 .text.libgcc.fixed
                0x000000000000039e        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_udivmodhi4.o)
                0x000000000000039e                . = ALIGN (0x2)
 *(.fini9)
 .fini9         0x000000000000039e        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_exit.o)
                0x000000000000039e                exit
                0x000000000000039e                _exit
 *(.fini9)
 *(.fini8)
 *(.fini8)
 *(.fini7)
 *(.fini7)
 *(.fini6)
 *(.fini6)
 *(.fini5)
 *(.fini5)
 *(.fini4)
 *(.fini4)
 *(.fini3)
 *(.fini3)
 *(.fini2)
 *(.fini2)
 *(.fini1)
 *(.fini1)
 *(.fini0)
 .fini0         0x000000000000039e        0x4 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_exit.o)
 *(.fini0)
                0x00000000000003a2                _etext = .

.data           0x0000000000800060        0x0 load address 0x00000000000003a2
                0x0000000000800060                PROVIDE (__data_start, .)
 *(.data)
 .data          0x0000000000800060        0x0 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr5/crtm32.o
 .data          0x0000000000800060        0x0 ./ausgabe.o
 .data          0x0000000000800060        0x0 ./main.o
 .data          0x0000000000800060        0x0 ./pwm.o
 .data          0x0000000000800060        0x0 ./serial.o
 .data          0x0000000000800060        0x0 ./tasten.o
 .data          0x0000000000800060        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_exit.o)
 .data          0x0000000000800060        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_clear_bss.o)
 .data          0x0000000000800060        0x0 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr5/libc.a(itoa.o)
 .data          0x0000000000800060        0x0 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr5/libc.a(strrev.o)
 .data          0x0000000000800060        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_udivmodhi4.o)
 *(.data*)
 *(.rodata)
 *(.rodata*)
 *(.gnu.linkonce.d*)
                0x0000000000800060                . = ALIGN (0x2)
                0x0000000000800060                _edata = .
                0x0000000000800060                PROVIDE (__data_end, .)

.bss            0x0000000000800060       0x85
                0x0000000000800060                PROVIDE (__bss_start, .)
 *(.bss)
 .bss           0x0000000000800060        0x0 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr5/crtm32.o
 .bss           0x0000000000800060        0x0 ./ausgabe.o
 .bss           0x0000000000800060        0x0 ./main.o
 .bss           0x0000000000800060        0x0 ./pwm.o
 .bss           0x0000000000800060        0x0 ./serial.o
 .bss           0x0000000000800060        0x0 ./tasten.o
 .bss           0x0000000000800060        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_exit.o)
 .bss           0x0000000000800060        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_clear_bss.o)
 .bss           0x0000000000800060        0x0 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr5/libc.a(itoa.o)
 .bss           0x0000000000800060        0x0 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr5/libc.a(strrev.o)
 .bss           0x0000000000800060        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_udivmodhi4.o)
 *(.bss*)
 .bss.ausgabe   0x0000000000800060        0x1 ./ausgabe.o
 .bss.abweich_count
                0x0000000000800061        0x1 ./tasten.o
 .bss.tasten_ausgabe
                0x0000000000800062        0x1 ./tasten.o
 .bss.status    0x0000000000800063        0x1 ./tasten.o
 .bss.counter   0x0000000000800064        0x1 ./tasten.o
 .bss.laufzeit_buffer
                0x0000000000800065       0x80 ./tasten.o
 *(COMMON)
                0x00000000008000e5                PROVIDE (__bss_end, .)
                0x00000000000003a2                __data_load_start = LOADADDR (.data)
                0x00000000000003a2                __data_load_end = (__data_load_start + SIZEOF (.data))

.noinit         0x00000000008000e5        0x0
                0x00000000008000e5                PROVIDE (__noinit_start, .)
 *(.noinit*)
                0x00000000008000e5                PROVIDE (__noinit_end, .)
                0x00000000008000e5                _end = .
                0x00000000008000e5                PROVIDE (__heap_start, .)

.eeprom         0x0000000000810000        0x0
 *(.eeprom*)
                0x0000000000810000                __eeprom_end = .

.fuse
 *(.fuse)
 *(.lfuse)
 *(.hfuse)
 *(.efuse)

.lock
 *(.lock*)

.signature
 *(.signature*)

.user_signatures
 *(.user_signatures*)

.stab           0x0000000000000000      0x954
 *(.stab)
 .stab          0x0000000000000000      0x6cc /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr5/crtm32.o
 .stab          0x00000000000006cc      0x1b0 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr5/libc.a(itoa.o)
                                        0x1bc (size before relaxing)
 .stab          0x000000000000087c       0xd8 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr5/libc.a(strrev.o)
                                         0xe4 (size before relaxing)

.stabstr        0x0000000000000000       0xb4
 *(.stabstr)
 .stabstr       0x0000000000000000       0xb4 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr5/crtm32.o

.stab.excl
 *(.stab.excl)

.stab.exclstr
 *(.stab.exclstr)

.stab.index
 *(.stab.index)

.stab.indexstr
 *(.stab.indexstr)

.comment        0x0000000000000000       0x11
 *(.comment)
 .comment       0x0000000000000000       0x11 ./ausgabe.o
                                         0x12 (size before relaxing)
 .comment       0x0000000000000000       0x12 ./main.o
 .comment       0x0000000000000000       0x12 ./pwm.o
 .comment       0x0000000000000000       0x12 ./serial.o
 .comment       0x0000000000000000       0x12 ./tasten.o

.debug
 *(.debug)

.line
 *(.line)

.debug_srcinfo
 *(.debug_srcinfo)

.debug_sfnames
 *(.debug_sfnames)

.debug_aranges
 *(.debug_aranges)

.debug_pubnames
 *(.debug_pubnames)

.debug_info
 *(.debug_info)
 *(.gnu.linkonce.wi.*)

.debug_abbrev
 *(.debug_abbrev)

.debug_line
 *(.debug_line)

.debug_frame
 *(.debug_frame)

.debug_str
 *(.debug_str)

.debug_loc
 *(.debug_loc)

.debug_macinfo
 *(.debug_macinfo)

.debug_pubtypes
 *(.debug_pubtypes)

.debug_ranges
 *(.debug_ranges)

.debug_macro
 *(.debug_macro)
OUTPUT(CapazitiveTasten.elf elf32-avr)
LOAD linker stubs
